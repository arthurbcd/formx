include: all_lint_rules.yaml
analyzer:
  exclude:
    - "**/*.g.dart"
  language:
    strict-casts: true
    strict-inference: true
    # strict-raw-types: true
  errors:
    # Otherwise cause the import of all_lint_rules to warn because of some rules conflicts.
    # We explicitly enabled even conflicting rules and are fixing the conflict
    # in this file
    included_file_warning: ignore
    
    # Treat missing required parameters as an error, not as a hint or a warning.
    missing_required_param: error

    # Treat missing returns as an error, not as a hint or a warning.
    missing_return: error

    # Treats assigning new values to a parameter as a error. Making them always immutable.
    parameter_assignments: ignore

    # Allow self-reference to deprecated members. This is done because otherwise we have
    # to annotate every member in every test, assert, etc. when we deprecate something.
    deprecated_member_use_from_same_package: ignore
    use_function_type_syntax_for_parameters: ignore
    discarded_futures: ignore
    depend_on_referenced_packages: ignore
    avoid_dynamic_calls: ignore
    implicit_call_tearoffs: ignore
    cascade_invocations: ignore
    inference_failure_on_instance_creation: ignore
    # strict_raw_type: ignore
linter:
  rules:
    prefer_final_locals: false
    avoid_annotating_with_dynamic: false
    
    # Conflicts with ignored parameters (final _) =>. Unnecessary final.
    prefer_final_parameters: false

    # This sometimes makes things more unclear when one line is enough. Also, single line if:s are
    # recommended in Effective Dart "DO format your code using dartfmt".
    always_put_control_body_on_new_line: false

    # Conflicts with `prefer_single_quotes`
    # Single quotes are easier to type and don't compromise on readability.
    prefer_double_quotes: false

    # Conflicts with `omit_local_variable_types` and other rules.
    # As per Dart guidelines, we want to avoid unnecessary types to make the code
    # more readable.
    # See https://dart.dev/guides/language/effective-dart/design#avoid-type-annotating-initialized-local-variables
    always_specify_types: false

    # Incompatible with `prefer_final_locals`
    # Having immutable local variables makes larger functions more predictible
    # so we will use `prefer_final_locals` instead.
    unnecessary_final: false

    # Not quite suitable for Flutter, which may have a `build` method with a single
    # return, but that return is still complex enough that a "body" is worth it.
    prefer_expression_function_bodies: false

    # Conflicts with the convention used by flutter, which puts `Key key`
    # and `@required Widget child` last.
    always_put_required_named_parameters_first: false

    # There are situations where we voluntarily want to catch everything,
    # especially as a library.
    avoid_catches_without_on_clauses: false

    # conflicts with `prefer_relative_imports`
    always_use_package_imports: false

    # Too many false positive (builders)
    diagnostic_describe_all_properties: false

    # false positives (setter-like functions)
    avoid_positional_boolean_parameters: false